-- movie
DROP SCHEMA IF EXISTS movie;

-- movie
CREATE SCHEMA movie;

-- use movie
use movie;

-- address
CREATE TABLE movie.address (
   addrNo    CHAR(5)     null,
   sido      VARCHAR(20) null,
   sigungu   VARCHAR(20) null,
   doro      VARCHAR(20) null,
   building1 INT(5)      null,
   building2 INT(5)      null
);

-- board
CREATE TABLE movie.board (
   board_no      INT(11)      NOT NULL,
   user_id       VARCHAR(50)  NOT NULL,
   movie_no      INT(11)      NOT NULL,
   user_name	 VARCHAR(50)  NOT NULL,
   board_content TEXT         NULL,
   regdate       DATE         NOT NULL,
   grade         INT(11)      NULL
);

create table movie.notice(
	board_no integer primary key auto_increment,
	title varchar(50) not null,
	content text not null,
	regdate date not null,
	readcount integer
);

-- serviceBoard
create table movie.serviceBoard(
    board_no integer,
    user_id VARCHAR(50),
    consulting varchar(50),
    classification varchar(50),
    title varchar(50),
    filename varchar(255),
    filepath text,
    content text,
    regdate date,
    answer boolean,
    answer_content text
);
ALTER TABLE serviceBoard ADD constraint PRIMARY KEY (board_no);
ALTER TABLE serviceBoard MODIFY COLUMN board_no integer NOT NULL AUTO_INCREMENT;

-- board
ALTER TABLE movie.board ADD constraint PRIMARY KEY (board_no);
ALTER TABLE movie.board MODIFY COLUMN board_no INT(11) NOT NULL AUTO_INCREMENT;

-- movie
CREATE TABLE movie.movie (
   movie_no      INT(11)      NOT NULL,
   movie_name    VARCHAR(50)  NOT NULL,
   path_poster   VARCHAR(255) NULL,
   play_time     INT(11)      NULL,
   rating        INT(11)      NULL,
   grade         DOUBLE       NULL,
   open_date     DATE         NULL,
   close_date    DATE         NULL,
   genre         VARCHAR(255) NULL,
   path_steelcut VARCHAR(255) NULL,
   path_video    VARCHAR(255) NULL,
   synopsis      TEXT         NULL,
   actor         VARCHAR(255) NULL,
   director      VARCHAR(255) NULL,
   filePath      varchar(255) null
);

-- movie
ALTER TABLE movie.movie ADD constraint PRIMARY KEY (movie_no);
ALTER TABLE movie.movie MODIFY COLUMN movie_no INT(11) NOT NULL AUTO_INCREMENT;
   
-- reservation
CREATE TABLE movie.reservation (
   no           INT(11)      NOT NULL,
   user_id      VARCHAR(50)  NOT NULL,
   timetable_no INT(11)      NOT NULL,
   price        INT(11)      NOT NULL,
   seat         VARCHAR(255) NOT NULL,
   progress     INT(11)      NOT NULL
)
COMMENT 'reservation';

-- reservation
ALTER TABLE movie.reservation ADD CONSTRAINT PRIMARY KEY (no);
ALTER TABLE movie.reservation MODIFY COLUMN no INT(11) NOT NULL AUTO_INCREMENT;

-- theater
CREATE TABLE movie.theater (
   theater_no       INT(11)      NOT NULL,
   theater_name     VARCHAR(255) NOT NULL,
   theater_floor    INT(11)      NOT null,
   theater_maxcount INT(11)      NOT null,
   theater_row      VARCHAR(2)   NOT NULL,
   theater_col      INT(11)      NULL,
   theater_type     VARCHAR(255) NOT NULL,
   theater_table    TEXT         NULL
);

-- theater
ALTER TABLE movie.theater ADD constraint PRIMARY KEY (theater_no);
ALTER TABLE movie.theater MODIFY COLUMN theater_no INT(11) NOT NULL AUTO_INCREMENT;

-- timetable
CREATE TABLE movie.timetable (
   table_no   INT(11) NOT NULL,
   movie_no   INT(11) NOT NULL,
   theater_no INT(11) NOT NULL,
   start_time DATETIME    NOT NULL,
   end_time   DATETIME    NOT NULL
);

-- timetable
ALTER TABLE movie.timetable ADD constraint PRIMARY KEY (table_no);
ALTER TABLE movie.timetable MODIFY COLUMN table_no INT(11) NOT NULL AUTO_INCREMENT;

-- user
CREATE TABLE movie.user (
   user_id   VARCHAR(50)  NOT NULL,
   password  VARCHAR(50)  NOT NULL,
   point     INT(11)      NULL,
   email     VARCHAR(50)  NOT null,
   phone     VARCHAR(50)  NOT NULL,
   addr      VARCHAR(255) NOT NULL,
   gender    VARCHAR(50)  NOT NULL,
   user_rank VARCHAR(50)  NULL,
   name      VARCHAR(255) NOT NULL
);

-- user
ALTER TABLE movie.user ADD constraint PRIMARY KEY (user_id);

-- user_rank
CREATE TABLE movie.user_rank (
   name     VARCHAR(50) NOT NULL,
   discount INT(11)     NULL
);

-- user_rank
ALTER TABLE movie.user_rank ADD constraint PRIMARY KEY (name);

-- board
ALTER TABLE movie.board
ADD CONSTRAINT FK_movie_TO_board
FOREIGN KEY (movie_no)
REFERENCES movie.movie (movie_no),
ADD INDEX FK_movie_TO_board (movie_no);

-- board
ALTER TABLE movie.board
ADD CONSTRAINT FK_user_TO_board
FOREIGN KEY (user_id)
REFERENCES movie.user (user_id)
on update cascade
on delete cascade,
ADD INDEX FK_user_TO_board (user_id);

-- reservation
ALTER TABLE movie.reservation
ADD CONSTRAINT FK_timetable_TO_reservation
FOREIGN KEY (timetable_no)
REFERENCES movie.timetable (table_no),
ADD INDEX FK_timetable_TO_reservation (timetable_no);

-- reservation
ALTER TABLE movie.reservation
ADD CONSTRAINT FK_user_TO_reservation
FOREIGN KEY (user_id)
REFERENCES movie.user (user_id)
on update cascade
on delete cascade,
ADD INDEX FK_user_TO_reservation (user_id);

-- timetable
ALTER TABLE movie.timetable
ADD CONSTRAINT FK_movie_TO_timetable
FOREIGN KEY (movie_no)
REFERENCES movie.movie (movie_no),
ADD INDEX FK_movie_TO_timetable (movie_no);

-- timetable
ALTER TABLE movie.timetable
ADD CONSTRAINT FK_theater_TO_timetable
FOREIGN KEY (theater_no)
REFERENCES movie.theater (theater_no),
ADD INDEX FK_theater_TO_timetable (theater_no);

-- user
ALTER TABLE movie.user
ADD CONSTRAINT FK_user_rank_TO_user
FOREIGN KEY (user_rank)
REFERENCES movie.user_rank (name),
ADD INDEX FK_user_rank_TO_user (user_rank);


create view moviehistory as
select user.user_id,movie.movie_no, movie.movie_name, theater.theater_name, timetable.start_time,reservation.seat, movie.rating, movie.path_poster
from reservation, timetable, theater, movie, user
where reservation.user_id = user.user_id
   and reservation.timetable_no = timetable.table_no
   and timetable.movie_no = movie.movie_no
   and timetable.theater_no = theater.theater_no
   and reservation.progress = 0;

create view reservation_user as
select reservation.`no`, user.user_id,movie.movie_no, movie.movie_name,theater.theater_name, theater.theater_type,reservation.seat, timetable.start_time,reservation.price,movie.rating,movie.path_poster
from reservation, timetable, theater, movie, user
where reservation.user_id = user.user_id
   and reservation.timetable_no = timetable.table_no
   and timetable.movie_no = movie.movie_no
   and timetable.theater_no = theater.theater_no
   and reservation.progress = 2;   


-- manager
insert into user(user_id, password, point, email, phone, addr, gender, user_rank, name) values('manager1',password('11'),0,'gdg','010','a','g','관리자','관리자');
